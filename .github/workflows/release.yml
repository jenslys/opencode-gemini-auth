name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          always-auth: true

      - name: Determine release state
        id: determine
        run: |
          set -euo pipefail
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            PREVIOUS_VERSION=$(node -e "const { execSync } = require('node:child_process'); try { const data = execSync('git show HEAD^:package.json', { stdio: ['ignore', 'pipe', 'ignore'] }); const json = JSON.parse(data.toString()); if (json && typeof json.version === 'string') { process.stdout.write(json.version); } } catch (error) {}")
            PREVIOUS_VERSION=${PREVIOUS_VERSION//$'\n'/}
          else
            PREVIOUS_VERSION=""
          fi
          echo "previous_version=$PREVIOUS_VERSION" >> "$GITHUB_OUTPUT"
          if [ "$CURRENT_VERSION" = "$PREVIOUS_VERSION" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
          git fetch --tags --force
          if git tag -l "v$CURRENT_VERSION" | grep -q "v$CURRENT_VERSION"; then
            echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Verify NPM token
        if: steps.determine.outputs.changed == 'true' && steps.determine.outputs.tag_exists == 'false'
        run: |
          if [ -z "${NPM_TOKEN}" ]; then
            echo "NPM_TOKEN secret is required" >&2
            exit 1
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        if: steps.determine.outputs.changed == 'true' && steps.determine.outputs.tag_exists == 'false'
        run: npm install

      - name: Create GitHub release
        if: steps.determine.outputs.changed == 'true' && steps.determine.outputs.tag_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.determine.outputs.current_version }}
          release_name: v${{ steps.determine.outputs.current_version }}
          generate_release_notes: true

      - name: Publish to npm
        if: steps.determine.outputs.changed == 'true' && steps.determine.outputs.tag_exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --provenance
